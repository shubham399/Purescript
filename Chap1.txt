--
-- E1:
--testtrue = foldl (&&) true [true,false,true]
-- Output will be false
--
-- E2:
-- foldl (==) false xs returns true
-- xs will be an array with all value to be false
--
-- E3:
-- count :: forall a. (a -> Boolean) -> Array a -> Int
--  count _ [] = 0
--  count p xs = if p (unsafePartial head xs)
--  then count p (unsafePartial tail xs) + 1
--  else count p (unsafePartial tail xs)
-- Output
-- count' :: forall a. (a -> Boolean) -> Array a -> Int
--  count' _ [] = 0
-- count' p xs acc =  if p (unsafePartial head xs : acc)
--  then count p (unsafePartial tail xs) + 1
--  else count p (unsafePartial tail xs)
--
-- E4:
-- reverse = foldl (\xs x -> [x] <> xs) []



